#                                                【P】 【Y】 【T】 【H】 【O】 【N】                                                      #
#---------------------------------------------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------------------------------------#
                                                         S T R I N G S 
#---------------------------------------------------------------------------------------------------------------------------------------#

#---------------------------------------------------------------------------------------------------------------------------------------#
~U V O D
Već smo se upoznali sa stringovima i s tim kakav je to tip podatka, međutim u ovom dijelu proširujemo naše znanje o stringovima, kako 
bi ih bolje upoznali, jer ukoliko se želimo koristiti tekstom unutar Python-a, morat ćemo se koristiti stringom. 
Kao što smo ranije rekli string možemo napraviti na način da se koristimo navodnim znacima sa dvije ili sa jednom crticom, dakle:
" "  ili '' . 
Koristili se mi jednim ili drugim načinom, potpuno je svejedno i ne mijenja ponašanje stringa u bilo kojem smislu.

*Pogledati primjer: "4_4SingleOrDoubleQuotes.py"
#---------------------------------------------------------------------------------------------------------------------------------------#

#---------------------------------------------------------------------------------------------------------------------------------------#
~N A V O D N I C I  U N U T A R  N A V O D N I K A ?
Ukoliko želimo iskoristiti ' ' unutar ' ' ili " " unutar " " pri ispisu teksta, normalno ovo će zbuniti Python i takav kod neće biti 
moguć za izvesti, međutim, postoji riješenje i za to. Riješenje je da se koristimo kosom crtom unazad (backslash-om '\') prije same 
upotrebe navodnog znaka. Naravno, backslash-ovi neće biti prikazani prilikom ispisa.

*Pogledati primjer: "8_1Backslash.py"
#---------------------------------------------------------------------------------------------------------------------------------------#

#---------------------------------------------------------------------------------------------------------------------------------------#
~P R E L A Z A K  U  N O V I  R E D 
Za sada znamo kako dobiti neki tekst, ali šta ukoliko imamo neki jako dugačak tekst koji se nalazi na istoj liniji, vjerujem da bi sve
to bilo malo teže za pročitati. Međutim, naravno, u Python-u imamo riješenje i za to (da nemamo ne bi više bio pametni Python :D). 
Riješenje za to jeste da se koristimo \n za prelazak u novu liniju tj. Novi red.

Pogledati primjer: "8_2NoviRed.py"

Također, moguće je na sličan način koristiti se tabom, samo što umjesto slova n, stavljamo slovo t : \t
#---------------------------------------------------------------------------------------------------------------------------------------#

#---------------------------------------------------------------------------------------------------------------------------------------#
~M U L T I L I N E  S T R I N G S 
Multiline strings su zapravo stringovi sa više linija teksta. Korištenje \n -a je jako korisno, ali nam može i stvarati probleme
kada želimo da formatiramo taj multiline tekst. Naravno i za ovo postoji riješenje, jer su nove linije automatski kreirane koristeći se
sa tri znaka za navodnike tj. """ neki tekst """

*Pogledati primjer: "8_3Multiline.py"
#---------------------------------------------------------------------------------------------------------------------------------------#
~O P E R A C I J E   N A D  S T R I N G O M 
Ukoliko se prisjetimo prethodno naučenog, naučili smo da možemo izvršiti spajanje string-a (tj. string concatenation). Međutim, pored 
ovoga stringove je moguće i pomnožiti, dakle moguće ih je pomnožiti sa integerom, međutim nije moguće pomnožiti string sa stringom jer
će to rezultovati u grešku. 

Pogledati primjer: "8_4MnozenjeStringa.py"

#---------------------------------------------------------------------------------------------------------------------------------------#

***URADITI:
11, 12 ZADATAK
